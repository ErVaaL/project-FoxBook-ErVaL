CREATE TABLE User(userID INT NOT NULL AUTO_INCREMENT, 
    userFirstName VARCHAR(255) NOT NULL,
    userLastName VARCHAR(255) NOT NULL,
    userEmail VARCHAR(255) NOT NULL,
    userDateOfBirth VARCHAR(255) NOT NULL,
    userPassword VARCHAR(255) NOT NULL,
    userUsername VARCHAR(255) NOT NULL,
    userProfile INT NOT NULL,
    userFriends VARCHAR(255),
    PRIMARY KEY (userID),
    FOREIGN KEY (userProfile) REFERENCES profile(ProfileID));CREATE TABLE adminUsers(
    AdminID INT NOT NULL AUTO_INCREMENT,
    UserID INT NOT NULL,
    PRIMARY KEY (AdminID),
    FOREIGN KEY (UserID) REFERENCES user(UserID));CREATE TABLE profile(ProfileID INT NOT NULL AUTO_INCREMENT,
    ProfileDescription TEXT,
    profileShowBirthDate TINYINT NOT NULL,
    profileShowAddress TINYINT NOT NULL,
    profileSeeProfile VARCHAR(15) NOT NULL,
    profileAddress VARCHAR(100),
    PRIMARY KEY (ProfileID));CREATE TABLE notification(notificationID INT NOT NULL AUTO_INCREMENT,
    FromFirstUserID INT NOT NULL,
    ToSecondUserID INT NOT NULL,
    NotificationType VARCHAR(50) NOT NULL,
    NotificationMessage VARCHAR(255),
    NotificationStatus TINYINT,
    NotificationDate DATETIME,
    RecieverSeen TINYINT,
    PRIMARY KEY (notificationID),
    FOREIGN KEY (FromFirstUserID) REFERENCES user(userID),
    FOREIGN KEY (ToSecondUserID) REFERENCES user(userID));CREATE TABLE Posts(PostID INT NOT NULL AUTO_INCREMENT,
    PostSender INT NOT NULL,
    PostTitle VARCHAR(150),
    PostContents TEXT,
    PostDateOfPublication DATETIME NOT NULL,
    PostLikes INT,
    PostEdited TINYINT,
    PRIMARY KEY (PostID),
    FOREIGN KEY (PostSender) REFERENCES User(userID));CREATE TABLE Comments(CommentID INT NOT NULL AUTO_INCREMENT,
    CommentedPost INT NOT NULL,
    CommentSender INT NOT NULL,
    CommentContents TEXT,
    CommentDate DATETIME,
    CommentEdited TINYINT,
    PRIMARY KEY (CommentID),
    FOREIGN KEY (CommentedPost) REFERENCES Posts(PostID),
    FOREIGN KEY (CommentSender) REFERENCES User(userID));CREATE TABLE Likes(PostLiked INT,
    LikedBy INT,
    FOREIGN KEY (PostLiked) REFERENCES Posts(PostID),
    FOREIGN KEY (LikedBy) REFERENCES User(userID));CREATE TABLE blockedUsers(BlockID INT NOT NULL AUTO_INCREMENT,
    BlockedUser INT NOT NULL,
     BlockReason VARCHAR(255),
     PRIMARY KEY (BlockID),
     FOREIGN KEY (BlockedUser) REFERENCES User(userID));CREATE TABLE userGroups(groupID INT NOT NULL AUTO_INCREMENT,
     groupCreator INT NOT NULL,
     groupName VARCHAR(100),
     groupDateOfCreation DATETIME,
     PRIMARY KEY (groupID),
     FOREIGN KEY (groupCreator) REFERENCES User(userID));CREATE TABLE groupMembers(groupID INT NOT NULL,
     groupMember INT NOT NULL,
     FOREIGN KEY (groupID) REFERENCES userGroups(groupID),
     FOREIGN KEY (groupMember) REFERENCES User(userID));CREATE TABLE events(eventID INT NOT NULL AUTO_INCREMENT,
     eventGroupID INT NOT NULL,
     eventCreator INT NOT NULL,
     eventName VARCHAR(100),
     eventDateOfExpiary DATETIME,
     eventDescription TEXT,
     eventStatus TINYINT,
     PRIMARY KEY (eventID),
     FOREIGN KEY (eventGroupID) REFERENCES userGroups(groupID),
     FOREIGN KEY (eventCreator) REFERENCES User(userID));CREATE TABLE eventjoined(eventID INT NOT NULL,
     userJoined INT NOT NULL,
     FOREIGN KEY (eventID) REFERENCES events(eventID),
     FOREIGN KEY (userJoined) REFERENCES User(userID));CREATE TABLE reports(reportID INT NOT NULL AUTO_INCREMENT,
     ReportedUser INT NOT NULL,
     ReportingUser INT NOT NULL,
     ReportDate DATETIME,
     ReportType VARCHAR(255),
     ReportDescription VARCHAR(255),
     ReportStatus TINYINT,
     PRIMARY KEY (reportID),
     FOREIGN KEY (ReportedUser) REFERENCES User(userID),
     FOREIGN KEY (ReportingUser) REFERENCES User(userID));